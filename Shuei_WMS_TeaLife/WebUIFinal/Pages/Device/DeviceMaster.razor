@page "/devicelist"
@using Application.Extentions
@using Domain.Enums
@using Domain.Entity.WMS
@using Microsoft.AspNetCore.Authorization

@inject IStringLocalizer<CommonResources> _localizerCommon
@inject IStringLocalizer<DeviceResources> _localizer

@attribute [Authorize(Policy = "Admin")]
@if (_dataGrid == null)
{
    <p><em>@_localizerCommon["Loading"]...</em></p>
}
else
{
    <RadzenTemplateForm Data="@_searchModel" Submit="@((SearchModel args) => { OnSearch(args); })">
        <RadzenRow Gap="2rem" class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenFieldset Text="@($"{_localizerCommon["Search"]} {_localizer["Device"]}")">
                    <RadzenStack Gap="5px">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn SizeXS="12" SizeSM="3">
                                <RadzenFormField Text="@($"{_localizer["Device"]} {_localizerCommon["Name"]}")" Variant="Variant.Outlined" Style="width:100%">
                                    <RadzenTextBox Name="deviceName" @bind-Value="@_searchModel.Name" Placeholder="Enter device name" />
                                </RadzenFormField>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="12" SizeSM="3">
                                <RadzenFormField Text="@($"{_localizer["Model"]}")" Variant="Variant.Outlined" Style="width:100%">
                                    <RadzenTextBox Name="model" @bind-Value="@_searchModel.Model" Placeholder="Enter model" />
                                </RadzenFormField>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="12" SizeSM="3">
                                <RadzenFormField Text="@($"{_localizerCommon["Status"]}")" Variant="Variant.Outlined" Style="width: 100%;">
                                    <RadzenDropDown @bind-Value="@_searchModel.Status" Data=@(Enum.GetValues(typeof(EnumStatus)).Cast<Enum>()) Name="_dropDownStatus"
                                                    Multiple=false AllowClear=true Placeholder="@($"{_localizerCommon["Select status"]}")" Chips=true />
                                </RadzenFormField>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="6" SizeSM="3">
                                <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" Wrap="Radzen.FlexWrap.Wrap" class="rz-mt-2">
                                    <RadzenButton Variant="Variant.Flat" Text="@($"{_localizerCommon["Search"]}")" Icon="search" ButtonType="Radzen.ButtonType.Submit" Size="ButtonSize.Large" />
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenColumn>
        </RadzenRow>
    </RadzenTemplateForm>

    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn SizeXS="12" SizeMD="12">
            <RadzenStack>
                <RadzenFieldset Text="@($"{_localizer["Device"]}{_localizer["Manager"]}")">
                    <RadzenStack Orientation="Radzen.Orientation.Vertical" JustifyContent="Radzen.JustifyContent.Center" AlignItems="AlignItems.Stretch" Gap="5px">
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.End" AlignItems="AlignItems.Center" Gap="1rem" Wrap="Radzen.FlexWrap.Wrap" class="rz-mt-2">
                            <RadzenButton Click=@(args => AddNewItemAsync()) Variant="Variant.Flat" Shade="Shade.Dark"
                                          Text="@($"{_localizer["AddNew"]}")" Icon="add_circle" ButtonStyle="ButtonStyle.Success" />
                        </RadzenStack>

                        <RadzenDataGrid Data="@filteredData" TItem="Device" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                        AllowPaging="true" PageSize="5" PageSizeText="@_localizerCommon["items per page"]" AllowSorting="true" EmptyText="@_localizerCommon["No records to display."]"
                                        AllowColumnPicking="false" AllowColumnResize="true" AllowGrouping="false" GridLines="Radzen.DataGridGridLines.Both" ShowPagingSummary="@_showPagerSummary" PagingSummaryFormat="@_pagingSummaryFormat" PageSizeOptions="@_pageSizeOptions">
                            <Columns>
                                <RadzenDataGridColumn TItem="Device" Filterable="false" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Width="150px">
                                    <HeaderTemplate><RadzenText Text="@($"{_localizer["Actions"]}")" /></HeaderTemplate>
                                    <Template Context="data">
                                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.Center" AlignItems="AlignItems.Center" Gap="2px" Wrap="Radzen.FlexWrap.Wrap">
                                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="visibility" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(() => ViewItemAsync(data))" @onclick:stopPropagation="true" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="edit" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(() => EditItemAsync(data))" @onclick:stopPropagation="true" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(() => DeleteItemAsync(data))" @onclick:stopPropagation="true" />
                                        </RadzenStack>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Device" Width="200px" Property="Name" Title="@($"{_localizer["Name"]}")" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn TItem="Device" Width="200px" Property="Type" Title="@($"{_localizer["Type"]}")" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn TItem="Device" Width="200px" Property="Model" Title="@($"{_localizer["Model"]}")" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn TItem="Device" Width="200px" Property="ActiveUser" Title="@($"{_localizer["ActiveUser"]}")" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn TItem="Device" Width="200px" Property="Status" Title="@($"{_localizer["Status"]}")" TextAlign="TextAlign.Center" />
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
}
@code {
    public class SearchModel
    {
        public string Name { get; set; }
        public string Model { get; set; }
        public EnumStatus? Status { get; set; }
    }

    private bool isDisabled = false;
    private SearchModel _searchModel = new SearchModel();
    IEnumerable<Device> filteredData;

    private IEnumerable<Device> OnSearch(SearchModel args)
    {
        filteredData = _dataGrid;

        if (!string.IsNullOrEmpty(_searchModel.Name))
        {
            filteredData = filteredData.Where(d => d.Name.Contains(_searchModel.Name, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (!string.IsNullOrEmpty(_searchModel.Model))
        {
            filteredData = filteredData.Where(d => d.Model.Contains(_searchModel.Model, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (_searchModel.Status.HasValue)
        {
            filteredData = filteredData.Where(d => d.Status == _searchModel.Status).ToList();
        }

        return filteredData;
    }
}