@page "/vendorlist"

@using Domain.Enums
@using Application.Extentions
@using Microsoft.AspNetCore.Authorization
@using VendorEntity = Domain.Entity.Commons.Vendor;
@using WebUIFinal.Core

@attribute [Authorize(Policy = "Admin")]
@if (_vendors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="@_searchModel" Submit="@((VendorSearchModel args) => { OnSearch(args); })">
        <RadzenRow Gap="2rem" class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenFieldset Text="Search Vendor Records" Disabled="@isDisabled">
                    <RadzenStack Gap="5px">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn SizeXS="12" SizeSM="3">
                                <RadzenFormField Text="Vendor Code" Variant="Variant.Outlined" Style="width:100%">
                                    <RadzenTextBox Name="vendorCode" @bind-Value="@_searchModel.VendorCode" Placeholder="Enter vendor code" />
                                </RadzenFormField>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="12" SizeSM="3">
                                <RadzenFormField Text="Vendor Name" Variant="Variant.Outlined" Style="width:100%">
                                    <RadzenTextBox Name="vendorName" @bind-Value="@_searchModel.VendorName" Placeholder="Enter vendor name" />
                                </RadzenFormField>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="12" SizeSM="3">
                                <RadzenFormField Text="Status" Variant="Variant.Outlined" Style="width: 100%;">
                                    <RadzenDropDown Disabled="@isDisabled" @bind-Value="@_searchModel.Status" Data=@(Enum.GetValues(typeof(EnumStatus)).Cast<Enum>()) Name="_dropDownStatus"
                                                    Multiple=false AllowClear=true Placeholder="Select status" Chips=true />
                                </RadzenFormField>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="6" SizeSM="3">
                                <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" Wrap="Radzen.FlexWrap.Wrap" class="rz-mt-2">
                                    <RadzenButton Variant="Variant.Flat" Text="Search" Icon="search" ButtonType="Radzen.ButtonType.Submit" Size="ButtonSize.Large" />
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenColumn>
        </RadzenRow>
    </RadzenTemplateForm>
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn SizeXS="12" SizeMD="12">
            <RadzenStack>
                <RadzenFieldset Text="Vendor list">
                    <RadzenStack Orientation=Radzen.Orientation.Vertical JustifyContent="Radzen.JustifyContent.Center" AlignItems="AlignItems.Stretch" Gap="5px">
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.End"
                                     AlignItems="AlignItems.Center" Gap="1rem" Wrap="Radzen.FlexWrap.Wrap" class="rz-mt-2">
                            <RadzenButton Click=@(args => AddNewItemAsync()) Variant="Variant.Flat" Shade="Shade.Dark"
                                          Text="Add new vendor" Icon="add_circle" ButtonStyle="ButtonStyle.Success" />
                        </RadzenStack>
                        <RadzenDataGrid @ref="_profileVendorGrid" Data="@_filteredModel" TItem="VendorEntity" AllowFiltering="true" class="custom-grid"
                                        FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5" AllowSorting="true"
                                        AllowColumnPicking="true" AllowColumnResize="true" AllowGrouping="true"
                                        GridLines="Radzen.DataGridGridLines.Both" AllowAlternatingRows="false"
                                        ShowPagingSummary=@_showPagerSummary PagingSummaryFormat="@Constants.PagingSummaryFormat" PageSizeOptions="@Constants.PageSizeOptions">
                            <Columns>
                                <RadzenDataGridColumn TItem="VendorEntity" Filterable="false" TextAlign="TextAlign.Center"
                                                      Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Width="170px">
                                    <HeaderTemplate>
                                        <RadzenText Text="Actions" />
                                    </HeaderTemplate>
                                    <Template Context="data">
                                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="visibility" Variant="Variant.Flat" Shade="Shade.Lighter"
                                                      Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => NavigateDetailPage(data.Id))" @onclick:stopPropagation="true" />
                                        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="edit" Variant="Variant.Flat" Shade="Shade.Lighter"
                                                      Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => EditItemAsync(data.Id))" @onclick:stopPropagation="true" />
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter"
                                                      Size="ButtonSize.Medium" class="my-1 ms-1"
                                                      Click="@(args => DeleteItemAsync(data))"
                                                      @onclick:stopPropagation="true" />
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="VendorEntity" Width="200px" Property="VendorCode" Title="Vendor Code" />
                                <RadzenDataGridColumn TItem="VendorEntity" Width="200px" Property="VendorName" Title="Vendor Name" />
                                <RadzenDataGridColumn TItem="VendorEntity" Width="200px" Property="BillingMail" Title="Email" />
                                <RadzenDataGridColumn TItem="VendorEntity" Width="200px" Property="BillingPhone" Title="Phone Number" />
                                <RadzenDataGridColumn TItem="VendorEntity" Width="200px" Property="Status" Title="Status" />
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
}

@code {
    public class VendorSearchModel
    {
        public string VendorCode { get; set; }
        public string VendorName { get; set; }
        public EnumStatus? Status { get; set; }
    }

    private string searchVendorCode;
    private string searchVendorName;
    private bool isDisabled = false;
    private VendorSearchModel _searchModel = new VendorSearchModel();
    private List<VendorEntity> _filteredModel = new List<VendorEntity>();

    private void OnSearch(VendorSearchModel args)
    {
        _filteredModel = _vendors;

        if (!string.IsNullOrEmpty(args.VendorName))
        {
            _filteredModel = _vendors.Where(_ => _.VendorName.Contains(args.VendorName, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (!string.IsNullOrEmpty(args.VendorCode))
        {
            _filteredModel = _vendors.Where(_ => _.VendorCode.Contains(args.VendorCode, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (args.Status.HasValue)
        {
            _filteredModel = _vendors.Where(_ => _.Status == args.Status).ToList();
        }

        StateHasChanged();
    }
}